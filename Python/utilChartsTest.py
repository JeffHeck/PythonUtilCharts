# -*- coding: utf-8 -*-
import pandas as pd
import utilCharts as utilCharts


# plotBar test
def plotBarTest():
    saveNameShort = 'plotBarTest.png'
    saveName = 'ReportsAutoGenerated/' + saveNameShort
    data = { 'xValues' : [ 'a' , 'b' , 'c' , 'd' , 'e' , 'f' ], 
            'yValues' : [ 1.5 , 1.7 , 3.6 , 2.4 , 2.9 , 3.2 ]}
    dataFrame = pd.DataFrame(data)  
    utilCharts.plotBar(aXValues='xValues', aYValues='yValues', aDF=dataFrame, 
        aSave=True, 
        aSaveName=saveName, aXLabel='', aYLabel='', aTitle='',
        aXGrid=True, aYGrid=False, aFormatYlabel=True,
        aYLabelFormat="{:,}", aXLabelRotation=0,
        aBottomSpacing=0.25, aHighlightSelectedXValues=False,
        aSelectedXValuesToHighlight=None,
        aXTickLabelsOn=True,
        aUseLimit=False, aLimit=[0,100])
    return saveNameShort


# plotBarGrouped test
def plotBarGroupedTest():
    saveNameShort = 'plotBarGroupedTest.png'
    saveName = 'ReportsAutoGenerated/' + saveNameShort
    data = { 'x' : [ 'x0' , 'x1' , 'x2' , 'x3' , 'x4' ], 
            'y0' : [ 100, 110, 120, 130, 140 ],
            'y1' : [ 200, 210, 220, 230, 240]}
    dataFrame = pd.DataFrame(data)  
    dataFrame = dataFrame.set_index('x')
    utilCharts.plotBarGrouped(aDF=dataFrame, aSave=True, 
        aSaveName=saveName, aXLabel='X Label', aYLabel='Y Label', 
        aTitle='Title',
        aXGrid=True, aYGrid=False, aFormatYlabel=True,
        aYLabelFormat="{:,}", aXLabelRotation=0,
        aBottomSpacing=0.25, aHighlightSelectedXValue=False,
        aSelectedXValueToHighlight='',
        aAnnotateEndX=0, aAnnotateEndY=0,
        aAnnotateStartX=0, aAnnotateStartY=0,
        aXTickLabelsOn=True,
        aUseLimit=False, aLimit=[0,20000],
        aUseWidth=False, aWidth=0.8,
        aStyle='seaborn-colorblind')
    return saveNameShort
    

# plotBarStackedGrouped test
def plotBarStackedGroupedTest():
    saveNameShort = 'plotBarStackedGroupedTest.png'
    saveName = 'ReportsAutoGenerated/' + saveNameShort
    # Create a list of [groupName, dataFrame] elements
    # The dataFrame should have data for a stacked bar chart
    list0 = list()
    group0 = 'g0'
    data0 = { 'xValues' : [ 'x0' , 'x1' , 'x2' , 'x3' , 'x4' ], 
            'cat0' : [ 10, 11, 12, 13, 14],
            'cag1' : [ 20, 21, 22, 23, 24 ]}
    dataFrame0 = pd.DataFrame(data0)  
    list0.append([group0, dataFrame0])
    group1 = 'g1'
    data1 = { 'xValues' : [ 'x0' , 'x1' , 'x2' , 'x3' , 'x4' ], 
            'cat0' : [ 30, 31, 32, 33, 34],
            'cag1' : [ 40, 41, 42, 43, 44 ]}
    dataFrame1 = pd.DataFrame(data1)  
    list0.append([group1, dataFrame1])
    utilCharts.plotBarStackedGrouped(aXValues='xValues', aData=list0, 
        aSave=True, 
        aSaveName=saveName, aXLabel='', aYLabel='', aTitle='',
        aFormatYlabel=True, aYGrid=True,
        aYLabelFormat="{:,}", aXLabelRotation=30,
        aBottomSpacing=0.25,
        aUseLimit=False, aLimit=[0,20000],
        aBarWidth=0.90, aPlotWidth=20, aPlotHeight=8,
        aProportionForLegend=0.1,
        aTitleFontSize=16, aOtherFontSize=10,
        aStyle='seaborn-colorblind',
        aColors='kr',
        aUseColors=True)
    return saveNameShort
    

# plotBarStacked test
def plotBarStackedTest():
    saveNameShort = 'plotBarStackedTest.png'
    saveName = 'ReportsAutoGenerated/' + saveNameShort
    data = { 'xValues' : [ 'x1' , 'x2' , 'x3' , 'x4' , 'x5' , 'x6' ], 
            'yValues0' : [ 1.5 , 1.7 , 3.6 , 2.4 , 2.9 , 3.2 ],
            'yValues1' : [ 1.5 , 1.7 , 3.6 , 2.4 , 2.9 , 3.2 ]}
    dataFrame = pd.DataFrame(data)  
    utilCharts.plotBarStacked(aXValues='xValues', 
        aYValues=['yValues0','yValues1'], 
        aDF=dataFrame, aSave=True, 
        aSaveName=saveName, aXLabel='', aYLabel='', aTitle='',
        aXGrid=True, aYGrid=True, aFormatYlabel=True,
        aYLabelFormat="{:,}", aXLabelRotation=0,
        aBottomSpacing=0.25, aHighlightSelectedXValue=False,
        aSelectedXValueToHighlight='',
        aAnnotateEndX=0, aAnnotateEndY=0,
        aAnnotateStartX=0, aAnnotateStartY=0,
        aXTickLabelsOn=True,
        aUseLimit=False, aLimit=[0,20000],
        aStyle='seaborn-muted',
        aColors='kr',
        aUseColors=False,
        aBarWidth=0.90,
        aLabelFontSize=9)
    return saveNameShort


# plotBox test
def plotBoxTest():
    data = { 'xValues' : ['x1', 'x1', 'x1', 'x1', 'x1', 'x1',
                          'x2', 'x2', 'x2', 'x2', 'x2', 'x2'], 
            'yValues' : [1, 2, 3, 3, 2, 1,
                         2, 3, 4, 4, 3, 2]}
    dataFrame = pd.DataFrame(data)  
    saveNameShort = 'plotBoxTest.png'
    saveName = 'ReportsAutoGenerated/' + saveNameShort
    utilCharts.plotBox(dataDF=dataFrame, aXValues='xValues', 
        aYValues='yValues',
        aSave=True, aSaveName=saveName, aTitle='',
        aYLabel='', aXAxisGrid=False, aYAxisGrid=False)
    return saveNameShort


# plotHistogram test
def plotHistogramTest():
    data = { 'xValues' : ['x1', 'x1', 'x1', 'x1', 'x1', 'x1',
                          'x2', 'x2', 'x2', 'x2', 'x2', 'x2'], 
            'yValues' : [1, 2, 3, 3, 2, 1,
                         2, 3, 4, 4, 3, 2]}
    dataFrame = pd.DataFrame(data)  
    saveNameShort = 'plotHistogramTest.png'
    saveName = 'ReportsAutoGenerated/' + saveNameShort
    utilCharts.plotHistogram(aVector=dataFrame['yValues'], aSave=True, 
        aSaveName=saveName, aXLabel='', aYLabel='', aTitle='', 
        aXLabelFormat='{:,}', aUseXLabelFormat=False, aOverlayBoxplot=True, 
        aOverlayMean=True, aBins=20, aStyle='seaborn-colorblind', 
        aXGrid=False, aYGrid=False)
    return saveNameShort


# plotLine test
def plotLineTest():
    data = { 'xValues' : [ 2000 , 2001 , 2002 , 2003 , 2004 , 2005 ], 
            'yValues0' : [ 1.5 , 1.7 , 3.6 , 2.4 , 2.9 , 3.2 ],
            'yValues1' : [ 1.7 , 1.9 , 3.8 , 2.6 , 3.1 , 3.4 ]} 
    dataFrame = pd.DataFrame(data)  
    saveNameShort = 'plotLineTest.png'
    saveName = 'ReportsAutoGenerated/' + saveNameShort
    utilCharts.plotLine(aPlotDF=dataFrame, aX='xValues', aY=['yValues0','yValues1'],
             aTitle='', aXTitle='', aYTitle='', aSaveFilename=saveName,
             aUseLimit=True, aLimit=[0,5])
    return saveNameShort


# plotLineMulti test
def plotLineMultiTest():
    data0 = {'xValues0' : [ 2000 , 2001 , 2002 , 2003 , 2004 , 2005 ], 
            'yValues00' : [ 1.5 , 1.7 , 3.6 , 2.4 , 2.9 , 3.2 ],
            'yValues01' : [ 1.7 , 1.9 , 3.8 , 2.6 , 3.1 , 3.4 ]} 
    dataFrame0 = pd.DataFrame (data0)  
    data1 = {'xValues1' : [ 2000 , 2001 , 2002 , 2003 , 2004 , 2006 ], 
            'yValues10' : [ 3.0 , 3.4 , 7.2 , 4.8 , 5.8 , 6.4 ],
            'yValues11' : [ 3.4 , 3.8 , 7.6 , 5.2 , 6.2 , 6.8 ]} 
    dataFrame1 = pd.DataFrame(data1)  
    saveNameShort = 'plotLineMultiTest.png'
    saveName = 'ReportsAutoGenerated/' + saveNameShort
    utilCharts.plotLineMulti(aPlotDF=[dataFrame0, dataFrame1], 
        aX=['xValues0','xValues1'], 
        aY=[['yValues00','yValues01'],['yValues10','yValues11']], 
        aTitle='', aXTitle='', aYTitle='', aSaveFilename=saveName,
        aUseLimit=False, aLimit=[0,5])
    return saveNameShort


# plotScatter test
def plotScatterTest():
    data = {'xValues' : [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ],
            'yValues' : [ 1, 4, 8, 2, 3, 1, -1, 3, 7, 4 ],
            'label': ['a','b','c','d','e','f','g','h','i', 'j']} 
    dataFrame = pd.DataFrame(data)  
    saveNameShort = 'plotScatterTest.png'
    saveName = 'ReportsAutoGenerated/' + saveNameShort
    utilCharts.plotScatter(aPlotDF=dataFrame, aX='xValues', aY='yValues', 
        aHighlightList=['d','e','f'], aHighlightCol='label', aTitle='', 
        aXTitle='', aYTitle='',
        aSaveFilename=saveName, 
        aLegendLocation=2, aCurveFitOrder=2,
        aIncludeFittedCurve=True, aYLabelFormat="{:,}",
        aShowLegend=True, aProportionForLegend=0.2,
        aUseLimit=False, aLimit=[0,20000],
        aFormatYLabel=True,
        aXLabelFormat='${:,}', aFormatXLabel=False,
        aUseCircleSize=False, aCircleSizeCol=None,
        aLegendFont=10)
    return saveNameShort


# plotScatterMulti test
def plotScatterMultiTest():
    data0 = {'xValues' : [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ],
            'yValues' : [ 1, 4, 8, 2, 3, 1, -1, 3, 7, 4 ],
            'label': ['a','b','c','d','e','f','g','h','i', 'j']} 
    dataFrame0 = pd.DataFrame(data0)
    data1 = {'xValues' : [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ],
            'yValues' : [ 2, 5, 9, 3, 4, 2, 0, 4, 8, 5 ],
            'label': ['a','b','c','d','e','f','g','h','i', 'j']} 
    dataFrame1 = pd.DataFrame(data1)  
    saveNameShort = 'plotScatterMultiTest.png'
    saveName = 'ReportsAutoGenerated/' + saveNameShort
    utilCharts.plotScatterMulti(aPlotDF0=dataFrame0, aX0='xValues', aY0='yValues', 
        aHighlightList0=['c','d','e'], aHighlightCol0='label',
        aPlotDF1=dataFrame1, aX1='xValues', aY1='yValues', 
        aHighlightList1=['c','d','e'], aHighlightCol1='label',
        aColor0='green', aColor1='blue',
        aLegendTitle0='data1',
        aLegendTitle1='data2',
        aTitle='', 
        aXTitle='', aYTitle='',
        aSaveFilename=saveName, 
        aLegendLocation=2, aCurveFitOrder=2,
        aIncludeFittedCurve=True, aYLabelFormat="{:,}",
        aShowLegend=True, aProportionForLegend=0.2,
        aUseLimit=False, aLimit=[0,20000],
        aFormatYLabel=True,
        aXLabelFormat='${:,}', aFormatXLabel=False,
        aUseCircleSize=False, aCircleSizeCol=None,
        aLegendFont=10)
    return saveNameShort


# Test all
def testAll():
    plotBarTest()
    plotBarGroupedTest()
    plotBarStackedGroupedTest()
    plotBarStackedTest()
    plotBoxTest()
    plotHistogramTest()
    plotLineTest()
    plotLineMultiTest()
    plotScatterTest()
    plotScatterMultiTest()
    